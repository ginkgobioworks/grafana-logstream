{"version":3,"sources":["../src/ctrl.js"],"names":["MetricsPanelCtrl","$","angular","kbn","transformDataToTable","transformers","LogRenderer","panelDefaults","targets","transform","showHeader","styles","type","pattern","dateFormat","columns","fontSize","LogPanelCtrl","$scope","$injector","$http","$location","uiSegmentSrv","annotationsSrv","table","dataRaw","dataRenderer","scrollPos","addColumnSegment","newPlusButton","fontSizes","columnTypes","text","value","unitFormats","getUnitFormats","dateFormats","getColumnNames","_","map","col","panel","fields","defaults","dataLoaded","http","tail","events","on","onDataReceived","bind","onDataError","onInitEditMode","onInitPanel","$tailBtn","id","_this","click","evt","console","log","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","optionsPath","addEditorTab","datasource","pageIndex","err","render","$logger","height","get","scrollHeight","animate","scrollTop","dataList","tailScroll","tmpPanelHeight","ctrl","row","replace","actualHeight","parseInt","scope","elem","attrs","data","renderPanel","renderer","dashboard","isTimezoneUtc","$sanitize","restoreScroll","panelHeight","getPanelHeight","renderData","renderingCompleted","column","without","$q","when","getColumns","segments","c","newSegment","find","push","plusButton","html","columnStyleDefaults","decimals","unit","copy","style","subItem","templateUrl"],"mappings":"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","file":"ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport $ from 'jquery';\nimport angular from 'angular';\nimport kbn from 'app/core/utils/kbn';\n\nimport './css/panel.css!';\n\nimport {\n  transformDataToTable,\n  transformers\n} from './transformers';\n\nimport { LogRenderer } from './renderer';\n\nconst panelDefaults = {\n  targets: [{}],\n  transform: 'json',\n  showHeader: true,\n  styles: [\n    {\n      type: 'date',\n      pattern: 'Time',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n    },\n    {\n      type: 'string',\n      pattern: '/.*/',\n    }\n  ],\n  columns: [],\n  fontSize: '100%',\n};\n\nexport class LogPanelCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $http, $location, uiSegmentSrv, annotationsSrv) {\n    super($scope, $injector);\n\n    this.table = null;\n    this.dataRaw = [];\n    this.dataRenderer = {};\n    this.scrollPos = null;\n    this.transformers = transformers;\n    this.annotationsSrv = annotationsSrv;\n    this.uiSegmentSrv = uiSegmentSrv;\n\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.columnTypes = [\n      {\n        text: 'Number',\n        value: 'number'\n      },\n      {\n        text: 'String',\n        value: 'string'\n      },\n      {\n        text: 'Date',\n        value: 'date'\n      },\n      {\n        text: 'Hidden',\n        value: 'hidden'\n      }\n    ];\n    this.unitFormats = kbn.getUnitFormats();\n    this.dateFormats = [\n      {\n        text: 'YYYY-MM-DD HH:mm:ss',\n        value: 'YYYY-MM-DD HH:mm:ss'\n      },\n      {\n        text: 'MM/DD/YY h:mm:ss a',\n        value: 'MM/DD/YY h:mm:ss a'\n      },\n      {\n        text: 'MMMM D, YYYY LT',\n        value: 'MMMM D, YYYY LT'\n      },\n    ];\n    // this is used from bs-typeahead and needs to be instance bound\n    this.getColumnNames = () => {\n      if (!this.table) {\n        return [];\n      }\n      return _.map(this.table.columns, function(col) {\n        return col.text;\n      });\n    };\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n    _.defaults(this.panel, panelDefaults);\n\n    this.dataLoaded = true;\n    this.http = $http;\n    this.tail = true;\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onInitPanel.bind(this));\n  }\n\n  onInitPanel() {\n    var $tailBtn = $('#logstream-tail-btn-' + this.panel.id);\n    var _this = this;\n    $tailBtn.click(function (evt) {\n      _this.tail = !_this.tail;\n    });\n    console.log('tail is', _this.tail);\n  }\n\n  // setup the editor\n  onInitEditMode() {\n    // determine the path to this plugin\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    var thisPanelPath = thisPanel.baseUrl + '/';\n    // add the relative path to the partial\n    var optionsPath = thisPanelPath + 'partials/editor.options.html';\n    this.addEditorTab('Options', optionsPath, 2);\n  }\n\n  getPanelPath() {\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    // the system loader preprends publib to the url, add a .. to go back one level\n    var thisPanelPath = '../' + thisPanel.baseUrl + '/';\n    return thisPanelPath;\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  tailScroll() {\n    var $logger = $('#logstream-display-' + this.panel.id);\n    var height = $logger.get(0).scrollHeight;\n    $logger.animate({\n        scrollTop: height\n    }, 500);\n  }\n\n  onDataReceived(dataList) {\n    this.dataRaw = dataList;\n\n    this.panel.transform = 'json';\n    this.render();\n  }\n\n  restoreScroll() {\n    if (this.tail) {\n      this.tailScroll();\n    } else {\n      $('#logstream-display-' + this.panel.id).scrollTop(this.scrollPos);\n    }\n  }\n\n  render() {\n    this.scrollPos = $('#logstream-display-' + this.panel.id).scrollTop();\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    return super.render(this.table);\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height via options\n    var tmpPanelHeight = this.$scope.ctrl.panel.height;\n    // if that is blank, try to get it from our row\n    if (typeof tmpPanelHeight === 'undefined') {\n      // get from the row instead\n      tmpPanelHeight = this.row.height;\n      // default to 250px if that was undefined also\n      if (typeof tmpPanelHeight === 'undefined') {\n        tmpPanelHeight = 250;\n      }\n    }\n    else {\n      // convert to numeric value\n      tmpPanelHeight = tmpPanelHeight.replace(\"px\",\"\");\n    }\n    var actualHeight = parseInt(tmpPanelHeight);\n    // grafana minimum height for a panel is 250px\n    if (actualHeight < 250) {\n      actualHeight = 250;\n    }\n    return actualHeight;\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    var data;\n    var panel = ctrl.panel;\n    var _this = this;\n\n    /**\n     * [renderPanel description]\n     * @return {[type]} [description]\n     */\n    function renderPanel() {\n      var renderer = new LogRenderer(panel, ctrl.table, ctrl.dashboard.isTimezoneUtc(), ctrl.$sanitize);\n      renderer.render();\n      _this.dataLoaded = true;\n      _this.restoreScroll();\n    }\n\n    ctrl.panel.panelHeight = this.getPanelHeight();\n    ctrl.events.on('render', function(renderData) {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n\n  // editor methods\n\n  transformChanged() {\n    this.panel.columns = [];\n    this.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = _.without(this.panel.columns, column);\n    this.render();\n  }\n\n  getColumnOptions() {\n    if (!this.dataRaw) {\n      return this.$q.when([]);\n    }\n    var columns = this.transformers[this.panel.transform].getColumns(this.dataRaw);\n    var segments = _.map(columns, (c) => this.uiSegmentSrv.newSegment({\n      value: c.text\n    }));\n    return this.$q.when(segments);\n  }\n\n  addColumn() {\n    var columns = transformers[this.panel.transform].getColumns(this.dataRaw);\n    var column = _.find(columns, {\n      text: this.addColumnSegment.value\n    });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    var plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  addColumnStyle() {\n    var columnStyleDefaults = {\n      type: 'string',\n      pattern: '/.*/',\n      decimals: 2,\n      unit: 'short',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n    };\n    this.panel.styles.push(angular.copy(columnStyleDefaults));\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = _.without(this.panel.styles, style);\n  }\n\n  setUnitFormat(column, subItem) {\n    column.unit = subItem.value;\n    this.render();\n  }\n\n}\nLogPanelCtrl.templateUrl = 'partials/template.html';\n"]}