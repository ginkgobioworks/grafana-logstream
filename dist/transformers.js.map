{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","message","_","flatten","json","description","getColumns","names","i","series","type","maxDocs","Math","min","datapoints","y","doc","flattened","propName","map","value","key","text","z","columns","push","dp","values","isObject","JSON","stringify","rows"],"mappings":"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","file":"transformers.js","sourcesContent":["\nimport _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport TableModel from 'app/core/table_model';\n\nvar transformers = {};\n\ntransformers.json = {\n  description: 'JSON Data',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    var names = {};\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      var maxDocs = Math.min(series.datapoints.length, 100);\n      for (var y = 0; y < maxDocs; y++) {\n        var doc = series.datapoints[y];\n        var flattened = flatten(doc, null);\n        for (var propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, function(value, key) {\n      return {text: key, value: key};\n    });\n  },\n  transform: function(data, panel, model) {\n    var i, y, z;\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({text: panel.columns[i].text});\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({text: 'JSON'});\n    }\n\n    for (i = 0; i < data.length; i++) {\n      var series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        var values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          var flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  }\n};\n\nfunction transformDataToTable(data, panel) {\n  var model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  var transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw {message: 'Transformer ' + panel.transformer + ' not found'};\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport {transformers, transformDataToTable};\n"]}