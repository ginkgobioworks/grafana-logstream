{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","moment","LogRenderer","panel","table","isUtc","sanitize","formatters","colorState","renderedData","v","style","undefined","_","isArray","join","escape","column","defaultCellFormatter","type","date","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","decimals","value","colIndex","i","styles","length","columns","regex","stringToJsRegex","pattern","text","match","createColumnFormatter","rowData","formattedRowData","y","row","rows","cellData","formatColumnValue","hidden","push","sortBy","o","formattedData","generateFormattedData","$logger","id","txt","forEach","html"],"mappings":"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","file":"renderer.js","sourcesContent":["import $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\n\nexport class LogRenderer {\n  constructor(panel, table, isUtc, sanitize) {\n    this.formatters = [];\n    this.colorState = {};\n    this.panel = panel;\n    this.table = table;\n    this.isUtc = isUtc;\n    this.sanitize = sanitize;\n    this.renderedData = {};\n  }\n\n  /**\n   * [defaultCellFormatter description]\n   * @param  {[type]} v     [description]\n   * @param  {[type]} style [description]\n   * @return {[type]}       [description]\n   */\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  /**\n   * [createColumnFormatter description]\n   * @param  {[type]} style  [description]\n   * @param  {[type]} column [description]\n   * @return {[type]}        [description]\n   */\n  createColumnFormatter(style, column) {\n    if (!style) {\n      return this.defaultCellFormatter;\n    }\n    if (style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n    if (style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        var date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(style.dateFormat);\n      };\n    }\n    if (style.type === 'number') {\n      let valueFormatter = kbn.valueFormats[column.unit || style.unit];\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n        if (_.isString(v)) {\n          return this.defaultCellFormatter(v, style);\n        }\n        return valueFormatter(v, style.decimals, null);\n      };\n    }\n    return (value) => {\n      return this.defaultCellFormatter(value, style);\n    };\n  }\n\n  /**\n   * [formatColumnValue description]\n   * @param  {[type]} colIndex [description]\n   * @param  {[type]} value    [description]\n   * @return {[type]}          [description]\n   */\n  formatColumnValue(colIndex, value) {\n    if (this.formatters[colIndex]) {\n      return this.formatters[colIndex](value);\n    }\n\n    for (let i = 0; i < this.panel.styles.length; i++) {\n      let style = this.panel.styles[i];\n      let column = this.table.columns[colIndex];\n      var regex = kbn.stringToJsRegex(style.pattern);\n      if (column.text.match(regex)) {\n        this.formatters[colIndex] = this.createColumnFormatter(style, column);\n        return this.formatters[colIndex](value);\n      }\n    }\n\n    this.formatters[colIndex] = this.defaultCellFormatter;\n    return this.formatters[colIndex](value);\n  }\n\n  /**\n   * [generateFormattedData description]\n   * @param  {[type]} rowData [description]\n   * @return {[type]}         [description]\n   */\n  generateFormattedData(rowData) {\n    let formattedRowData = [];\n    for (var y = 0; y < rowData.length; y++) {\n      let row = this.table.rows[y];\n      let cellData = [];\n\n      for (var i = 0; i < this.table.columns.length; i++) {\n        let value = this.formatColumnValue(i, row[i]);\n        if (value === undefined) {\n          this.table.columns[i].hidden = true;\n        }\n        cellData.push(this.formatColumnValue(i, row[i]));\n      }\n      formattedRowData.push(cellData);\n    }\n    formattedRowData =  _.sortBy(formattedRowData, function(o) { return o[0]; });\n    return formattedRowData;\n  }\n\n  render() {\n    // TODO: Currently this just redraws everything. In the future, maybe some intelligent list insertions to minimize\n    // redraws. It is currently done this way because when aggregating from multiple sources, we cannot guarantee the\n    // timestamps from each service will be in ascending order and some services may send logs that need to be\n    // interwoven in the current view\n\n    if (this.table.columns.length === 0) return;\n\n    var formattedData = this.generateFormattedData(this.table.rows);\n    var $logger = $('#logstream-display-' + this.panel.id);\n    var txt = [];\n    _.forEach(formattedData, function (row) {\n      txt.push(row.join('\\t'));\n    });\n    $logger.html(txt.join('\\n'));\n  }\n}\n"]}